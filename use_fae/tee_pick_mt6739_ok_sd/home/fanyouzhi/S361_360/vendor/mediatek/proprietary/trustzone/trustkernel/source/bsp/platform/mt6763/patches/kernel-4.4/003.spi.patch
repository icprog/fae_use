diff --git a/drivers/spi/mediatek/mt6763/Makefile b/drivers/spi/mediatek/mt6763/Makefile
index ace803f..c5fb5f8 100644
--- a/drivers/spi/mediatek/mt6763/Makefile
+++ b/drivers/spi/mediatek/mt6763/Makefile
@@ -8,4 +8,8 @@ ifeq ($(CONFIG_TRUSTONIC_TEE_SUPPORT),y)
 	include $(srctree)/drivers/misc/mediatek/gud/Makefile.include
 endif
 
+ifeq ($(CONFIG_TRUSTKERNEL_TEE_SUPPORT),y)
+subdir-ccflags-y += -I$(srctree)/drivers/misc/mediatek/tkcore/include/linux
+endif
+
 obj-$(CONFIG_MTK_SPI) += spi.o spi-dev.o
diff --git a/drivers/spi/mediatek/mt6763/spi.c b/drivers/spi/mediatek/mt6763/spi.c
index 42370c1..921d7d6 100644
--- a/drivers/spi/mediatek/mt6763/spi.c
+++ b/drivers/spi/mediatek/mt6763/spi.c
@@ -48,8 +48,14 @@
 #include <mach/mt_clkmgr.h>
 #endif				/* defined(CONFIG_MTK_CLKMGR) */
 
-#ifdef CONFIG_TRUSTONIC_TEE_SUPPORT
-#define SPI_TRUSTONIC_TEE_SUPPORT
+#ifdef CONFIG_TRUSTKERNEL_TEE_SUPPORT
+#define SPI_TRUSTKERNEL_TEE_SUPPORT
+#endif
+
+#ifdef SPI_TRUSTKERNEL_TEE_SUPPORT
+#include <tee_clkmgr.h>
+#include <tee_fp.h>
+#include <tee_kernel_lowlevel_api.h>
 #endif
 
 #ifdef SPI_TRUSTONIC_TEE_SUPPORT
@@ -564,7 +570,11 @@ static int is_pause_mode(struct spi_message *msg)
 	return conf->pause;
 }
 
+#ifdef SPI_TRUSTKERNEL_TEE_SUPPORT
+static int __used is_fifo_read(struct spi_message *msg)
+#else
 static int is_fifo_read(struct spi_message *msg)
+#endif
 {
 	struct mt_chip_conf *conf;
 
@@ -1200,6 +1210,22 @@ out:
 
 }
 
+#ifdef SPI_TRUSTKERNEL_TEE_SUPPORT
+
+#define SMC_SPI_IRQ	0xbf000101
+
+static irqreturn_t mt_spi_interrupt(int irq, void *dev_id)
+{
+	struct smc_param param;
+
+	param.a0 = SMC_SPI_IRQ;
+	tee_smc_call(&param);
+
+	return IRQ_HANDLED;
+}
+
+#else
+
 static irqreturn_t mt_spi_interrupt(int irq, void *dev_id)
 {
 	struct mt_spi_t *ms = (struct mt_spi_t *)dev_id;
@@ -1277,6 +1303,8 @@ out:
 	return IRQ_NONE;
 }
 
+#endif
+
 /* Write chip configuration to HW register */
 static int mt_do_spi_setup(struct mt_spi_t *ms, struct mt_chip_conf *chip_config)
 {
@@ -1669,6 +1697,10 @@ static int mt_spi_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "spi_register_master fails.\n");
 		goto out_free;
 	} else {
+#ifdef SPI_TRUSTKERNEL_TEE_SUPPORT
+    tee_clkmgr_register1("spi", master->bus_num, 
+        enable_clk, disable_clk, ms);
+#endif
 		SPI_DBG("spi register master success.\n");
 		/* reg_val = spi_readl ( ms, SPI_CMD_REG ); */
 		/* reg_val &= SPI_CMD_RST_MASK; */
