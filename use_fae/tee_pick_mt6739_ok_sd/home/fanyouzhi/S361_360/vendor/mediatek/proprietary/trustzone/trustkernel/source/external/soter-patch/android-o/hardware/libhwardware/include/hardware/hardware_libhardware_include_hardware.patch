commit 1adc8c40fd3549de73e15b0953333b901be1fe89
Author: zhangzs <zhangzs@trustkernel.com>
Date:   Mon Jun 11 17:17:02 2018 +0800

    patched for soter

diff --git a/keymaster1.h b/keymaster1.h
index a51da68..cdfb6de 100644
--- a/keymaster1.h
+++ b/keymaster1.h
@@ -531,6 +531,52 @@ struct keymaster1_device {
     keymaster_error_t (*abort)(const struct keymaster1_device* dev,
                                keymaster_operation_handle_t operation_handle);
 
+    /**
+     * Generates a pair of ATTK defined in SOTER. Save the private key into
+       RPMB and export the public key in* X.509v3 format. Note that the ATTK generated will never be touched
+       outside the key master.
+     * \param[in] dev The keymaster device structure.
+     * \param[in] copy_num The number of copies that will be saved in the
+       RPMB. E.g. the ATTK generated will
+     * be saved twice if the copy_num is 1.
+     */
+    keymaster_error_t (*generate_attk_key_pair)(const struct keymaster1_device* dev,
+                                               const uint8_t copy_num);
+    /**
+     * Verify the existance ATTK defined in SOTER.
+     * \param[in] dev The keymaster device structure.
+     * Returns: 0 if the ATTK exists.
+     */
+    keymaster_error_t (*verify_attk_key_pair)(const struct keymaster1_device* dev);
+
+    /**
+     * Export the public key of ATTK in X.509v3 format.
+     * \param[in] dev The keymaster device structure.
+     * \param[out] pub_key_data The public key data with X.509v3 format
+     * \param[out] pub_key_data_length The length of the public key data.
+     */
+    keymaster_error_t (*export_attk_public_key)(const struct keymaster1_device* dev,
+                                                const uint8_t* pub_key_data,
+                                                const size_t* pub_key_data_length);
+    /**
+     * Get the unique id.
+     * \param[out] device_id the device id data.
+     * unique_id The unique id for each device, format as below:
+     * 1.bytes 0-3: Identify each silicon provider id, defined by WeChat
+     * 2.bytes 4-7: SoC model ID, defined by each silicon provider like
+     Qualcomm and Trustonic
+     * 3.bytes 8-15: Public Chip Serial *Number of SoC, defined by each
+     silicon provider
+     like Qualcomm and Trustonic
+     * e.g 090000006795000012706b461410496b
+     *We can use 09 to identify MTK *or QC ... etc. chips.
+     *Use 6795 to identify different model
+     *Use CSN to identify each device. NOTE: THE DEVICE ID IS CALSS-SENSITIVE
+     * \prama[out] device_id_length the length of the device_id
+     */
+    keymaster_error_t (*get_device_id)(const struct keymaster1_device* dev,
+                                       const uint8_t* device_id,
+                                       const size_t* device_id_length);
 };
 typedef struct keymaster1_device keymaster1_device_t;
 
