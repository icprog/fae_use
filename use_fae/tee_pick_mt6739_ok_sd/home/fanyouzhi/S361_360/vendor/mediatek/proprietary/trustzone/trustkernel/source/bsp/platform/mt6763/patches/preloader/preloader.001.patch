diff --git a/Makefile b/Makefile
index 22dc7c5..2385105 100644
--- a/Makefile
+++ b/Makefile
@@ -475,6 +475,8 @@ show_feature:
 	echo 'CFG_RPMB_SET_KEY'= $(CFG_RPMB_SET_KEY) ; \
 	echo 'CFG_TRUSTONIC_TEE_SUPPORT'= $(CFG_TRUSTONIC_TEE_SUPPORT) ; \
 	echo 'CFG_MICROTRUST_TEE_SUPPORT'= $(CFG_MICROTRUST_TEE_SUPPORT) ; \
+	echo 'CFG_TRUSTKERNEL_TEE_SUPPORT'= $(CFG_TRUSTKERNEL_TEE_SUPPORT) ; \
+	echo 'CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT'= $(CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT) ; \
 	echo 'CFG_TEE_SECURE_MEM_PROTECTED'= $(CFG_TEE_SECURE_MEM_PROTECTED) ; \
 	echo 'CFG_TEE_SECURE_MEM_SHARED'= $(CFG_TEE_SECURE_MEM_SHARED) ; \
 	echo 'CFG_TEE_TRUSTED_APP_HEAP_SIZE'= $(CFG_TEE_TRUSTED_APP_HEAP_SIZE) ; \
diff --git a/custom/hct6763_66_n1/cust_bldr.mak b/custom/hct6763_66_n1/cust_bldr.mak
index 8dd92d4..e1fec62 100755
--- a/custom/hct6763_66_n1/cust_bldr.mak
+++ b/custom/hct6763_66_n1/cust_bldr.mak
@@ -25,13 +25,22 @@ ifeq ($(strip $(MTK_TEE_SUPPORT)),yes)
   else
     CFG_GOOGLE_TRUSTY_SUPPORT = 0
   endif
+  ifeq ($(strip $(TRUSTKERNEL_TEE_SUPPORT)),yes)
+    CFG_TRUSTKERNEL_TEE_SUPPORT = 1
+    CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT = 1
+  else
+    CFG_TRUSTKERNEL_TEE_SUPPORT = 0
+    CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT = 0
+  endif
 else
   CFG_TEE_SUPPORT = 0
   CFG_TRUSTONIC_TEE_SUPPORT = 0
   CFG_MICROTRUST_TEE_SUPPORT = 0
   CFG_GOOGLE_TRUSTY_SUPPORT = 0
+  CFG_TRUSTKERNEL_TEE_SUPPORT = 0
 endif
 $(warning CFG_TEE_SUPPORT=$(CFG_TEE_SUPPORT))
 $(warning CFG_TRUSTONIC_TEE_SUPPORT=$(CFG_TRUSTONIC_TEE_SUPPORT))
 $(warning CFG_MICROTRUST_TEE_SUPPORT=$(CFG_MICROTRUST_TEE_SUPPORT))
 $(warning CFG_GOOGLE_TRUSTY_SUPPORT=$(CFG_GOOGLE_TRUSTY_SUPPORT))
+$(warning CFG_TRUSTKERNEL_TEE_SUPPORT=$(CFG_TRUSTKERNEL_TEE_SUPPORT))
diff --git a/custom/hct6763_66_n1/hct6763_66_n1.mk b/custom/hct6763_66_n1/hct6763_66_n1.mk
index b75effd..4b446f8 100755
--- a/custom/hct6763_66_n1/hct6763_66_n1.mk
+++ b/custom/hct6763_66_n1/hct6763_66_n1.mk
@@ -26,10 +26,11 @@ MTK_UFS_POWP_SUPPORT=no
 RPMB_PER_DEVICE_KEY=no
 CUSTOM_CONFIG_MAX_DRAM_SIZE=0x800000000
 SPM_FW_USE_PARTITION=yes
-MTK_TEE_SUPPORT = no
+MTK_TEE_SUPPORT = yes
 TRUSTONIC_TEE_SUPPORT = no
 MICROTRUST_TEE_SUPPORT = no
+TRUSTKERNEL_TEE_SUPPORT = yes
 MTK_GOOGLE_TRUSTY_SUPPORT = no
 RT5081_PMU=yes
 MTK_UNLOCK_BAT_SUPPORT=yes
-export MTK_PLATFORM MTK_MT6333_SUPPORT MTK_FAN5405_SUPPORT MTK_EMMC_SUPPORT MTK_8193_SUPPORT MTK_SECURITY_SW_SUPPORT MTK_SEC_CHIP_SUPPORT MTK_SEC_USBDL MTK_SEC_BOOT MTK_SEC_MODEM_AUTH MTK_SEC_SECRO_AC_SUPPORT CUSTOM_SEC_AUTH_SUPPORT MTK_KERNEL_POWER_OFF_CHARGING MTK_EMMC_SUPPORT_OTP MTK_COMBO_NAND_SUPPORT MTK_DISABLE_POWER_ON_OFF_VOLTAGE_LIMITATION MTK_BQ24160_SUPPORT MTK_SEC_VIDEO_PATH_SUPPORT MTK_FACTORY_LOCK_SUPPORT CUSTOM_CONFIG_MAX_DRAM_SIZE MTK_TINYSYS_SSPM_SUPPORT SPM_FW_USE_PARTITION MTK_UFS_OTP_SUPPORT MTK_UFS_POWP_SUPPORT RPMB_PER_DEVICE_KEY MTK_TEE_SUPPORT TRUSTONIC_TEE_SUPPORT MICROTRUST_TEE_SUPPORT MTK_GOOGLE_TRUSTY_SUPPORT RT5081_PMU MTK_UNLOCK_BAT_SUPPORT
\ No newline at end of file
+export MTK_PLATFORM MTK_MT6333_SUPPORT MTK_FAN5405_SUPPORT MTK_EMMC_SUPPORT MTK_8193_SUPPORT MTK_SECURITY_SW_SUPPORT MTK_SEC_CHIP_SUPPORT MTK_SEC_USBDL MTK_SEC_BOOT MTK_SEC_MODEM_AUTH MTK_SEC_SECRO_AC_SUPPORT CUSTOM_SEC_AUTH_SUPPORT MTK_KERNEL_POWER_OFF_CHARGING MTK_EMMC_SUPPORT_OTP MTK_COMBO_NAND_SUPPORT MTK_DISABLE_POWER_ON_OFF_VOLTAGE_LIMITATION MTK_BQ24160_SUPPORT MTK_SEC_VIDEO_PATH_SUPPORT MTK_FACTORY_LOCK_SUPPORT CUSTOM_CONFIG_MAX_DRAM_SIZE MTK_TINYSYS_SSPM_SUPPORT SPM_FW_USE_PARTITION MTK_UFS_OTP_SUPPORT MTK_UFS_POWP_SUPPORT RPMB_PER_DEVICE_KEY MTK_TEE_SUPPORT TRUSTONIC_TEE_SUPPORT MICROTRUST_TEE_SUPPORT MTK_GOOGLE_TRUSTY_SUPPORT TRUSTKERNEL_TEE_SUPPORT RT5081_PMU MTK_UNLOCK_BAT_SUPPORT
diff --git a/platform/mt6763/default.mak b/platform/mt6763/default.mak
index 77be350..7d54af4 100644
--- a/platform/mt6763/default.mak
+++ b/platform/mt6763/default.mak
@@ -175,6 +175,8 @@ CFG_TEE_TRUSTED_APP_HEAP_SIZE :=0xA00000
 endif
 CFG_TEE_SECURE_MEM_SHARED :=1
 CFG_GOOGLE_TRUSTY_SUPPORT :=0
+CFG_TRUSTKERNEL_TEE_SUPPORT :=0
+CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT :=0
 
 #For platform debugging tools
 CFG_PLAT_SRAM_FLAG := 0
diff --git a/platform/mt6763/feature.mak b/platform/mt6763/feature.mak
old mode 100644
new mode 100755
index 792b832..8ae9859
--- a/platform/mt6763/feature.mak
+++ b/platform/mt6763/feature.mak
@@ -396,6 +396,16 @@ C_OPTION += -DCFG_TRUSTONIC_TEE_SUPPORT="$(CFG_TRUSTONIC_TEE_SUPPORT)"
 export CFG_TRUSTONIC_TEE_SUPPORT
 endif
 
+ifdef CFG_TRUSTKERNEL_TEE_SUPPORT
+C_OPTION += -DCFG_TRUSTKERNEL_TEE_SUPPORT="$(CFG_TRUSTKERNEL_TEE_SUPPORT)"
+export CFG_TRUSTKERNEL_TEE_SUPPORT
+endif
+
+ifdef CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+C_OPTION += -DCFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT="$(CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT)"
+export CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+endif
+
 ifdef CFG_TEE_SECURE_MEM_PROTECTED
 C_OPTION += -DCFG_TEE_SECURE_MEM_PROTECTED="$(CFG_TEE_SECURE_MEM_PROTECTED)"
 export CFG_TEE_SECURE_MEM_PROTECTED
diff --git a/platform/mt6763/makefile.mak b/platform/mt6763/makefile.mak
old mode 100644
new mode 100755
index 06c28fb..1dd89b9
--- a/platform/mt6763/makefile.mak
+++ b/platform/mt6763/makefile.mak
@@ -53,6 +53,7 @@ ifeq ($(CFG_MICROTRUST_TEE_SUPPORT),1)
 INCLUDE_FILE    += \
     -I$(MTK_PATH_PLATFORM)/src/security/trustzone/kdflib/inc
 endif
+
 ###################################################################
 # GCC Compile Options
 ###################################################################
diff --git a/platform/mt6763/src/core/main.c b/platform/mt6763/src/core/main.c
old mode 100644
new mode 100755
index 2e24af8..e1a7a05
--- a/platform/mt6763/src/core/main.c
+++ b/platform/mt6763/src/core/main.c
@@ -59,6 +59,12 @@
 #define MOD "[BLDR]"
 #define ATF_DRAM_IMG_NAME "atf_dram"
 
+#if CFG_TEE_SUPPORT
+#if CFG_TRUSTKERNEL_TEE_SUPPORT
+#include "tz_tkcore.h"
+#endif
+#endif
+
 /*============================================================================*/
 /* MACROS DEFINITIONS                                                         */
 /*============================================================================*/
@@ -167,6 +173,14 @@ static void bldr_pre_process(void)
     part_init();
     BOOTING_TIME_PROFILING_LOG("Part Init");
 
+#if CFG_TEE_SUPPORT
+#if CFG_TRUSTKERNEL_TEE_SUPPORT
+#if CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+    tkcore_boot_param_prepare_sdrpmb_region(part_get("sdrpmb"));
+#endif
+#endif
+#endif
+
 #if CFG_FAST_META_SUPPORT
     read_meta_proinfo(&meta_boot, &meta_log);
     if(check_meta_short_pin() || (meta_boot == 0x31)) {
@@ -371,6 +385,14 @@ int bldr_load_tee_part(char *name, blkdev_t *bdev, u32 *addr, u32 offset, u32 *s
     }
 #endif
 
+#if CFG_TEE_SUPPORT
+#if CFG_TRUSTKERNEL_TEE_SUPPORT
+#if CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+    tkcore_boot_param_prepare_sdrpmb_data(&(bootarg.mblock_info), bdev);
+#endif
+#endif
+#endif
+
     return ret;
 }
 
diff --git a/platform/mt6763/src/security/trustzone/inc/tz_tkcore.h b/platform/mt6763/src/security/trustzone/inc/tz_tkcore.h
new file mode 100644
index 0000000..69554a4
--- /dev/null
+++ b/platform/mt6763/src/security/trustzone/inc/tz_tkcore.h
@@ -0,0 +1,81 @@
+#ifndef TZ_TKCORE_H
+#define TZ_TKCORE_H
+
+#include "typedefs.h"
+
+#define TKCORE_BOOTCFG_MAGIC    (0x54534958)
+
+#define TEE_ARGUMENT_VERSION_LEGACY (0x00010000U)
+#define TEE_ARGUMENT_VERSION_V1_0   (0x00010001U)
+#define TEE_ARGUMENT_VERSION_V1_1   (0x00010002U)
+#define TEE_ARGUMENT_VERSION_V1_2   (0x00010003U)
+
+#define TEE_ARGUMENT_VERSION        TEE_ARGUMENT_VERSION_V1_2
+
+#define TKCORE_SHM_SIZE_LIMIT   (0x400000U)
+
+#define RPMB_KEY_SIZE    32
+
+#define SDRPMB_FAILURE_MAGIC    (0xCDCDCDCDU)
+/* effective data size */
+#define SDRPMB_DATA_SIZE        (1U << 20)
+/* size of two write protected regions */
+#define SDRPMB_REGION_SIZE      (16U << 20)
+/* granu of sdrpmb region */
+#define SDRPMB_REGION_ALIGNMENT (8U << 20)
+
+typedef struct {
+    u32 magic;        // magic value from information
+    u32 length;       // size of struct in bytes.
+    u64 version;      // Version of structure
+    u64 dRamBase;     // NonSecure DRAM start address
+    u64 dRamSize;     // NonSecure DRAM size
+    u64 secDRamBase;  // Secure DRAM start address
+    u64 secDRamSize;  // Secure DRAM size
+    u64 secIRamBase;  // Secure IRAM base
+    u64 secIRamSize;  // Secure IRam size
+    u64 gic_distributor_base;
+    u64 gic_cpuinterface_base;
+    u32 gic_version;
+    u32    uart_base;
+    u32 total_number_spi;
+    u32 ssiq_number;
+    u64 flags;
+    u8  rpmb_key[RPMB_KEY_SIZE];
+
+    /* for TEE_ARGUMENT_VERSION_1 */
+    u8 rpmb_key_programmed;
+
+    /* for TEE_ARGUMENT_VERSION_2 (mt6580 specific) */
+    u32 nw_bootargs;
+    u32 nw_bootargs_size;
+
+    /* for TEE_ARGUMENT_VERSION_3 */
+    u32 sdrpmb_partaddr;
+    u32 sdrpmb_partsize;
+    u32 sdrpmb_starting_sector;
+    u32 sdrpmb_nr_sectors;
+
+    u8 resv[7];
+} __attribute__((packed)) tee_arg_t, *tee_arg_t_ptr;
+
+void tkcore_boot_param_prepare(u32 param_addr, u32 tee_entry,
+    u64 sec_dram_size, u64 dram_base, u64 dram_size, int meta_uart);
+
+#if CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+void tkcore_boot_param_prepare_sdrpmb_region(part_t *part);
+
+void tkcore_boot_param_prepare_sdrpmb_data(mblock_info_t *mblock, blkdev_t *bootdev);
+
+void tkcore_boot_sdrpmb_init_finish(u32 param_addr);
+#endif
+
+void tkcore_boot_param_prepare_rpmbkey(u32 param_addr,
+    u8 *rpmb_key, u32 rpmb_keylen);
+
+void tkcore_boot_param_prepare_nwbootargs(u32 param_addr,
+    u32 addr, u32 size);
+
+void tkcore_dump_param(u32 param_addr);
+
+#endif
diff --git a/platform/mt6763/src/security/trustzone/makefile b/platform/mt6763/src/security/trustzone/makefile
old mode 100644
new mode 100755
index 4500340..59e290a
--- a/platform/mt6763/src/security/trustzone/makefile
+++ b/platform/mt6763/src/security/trustzone/makefile
@@ -26,6 +26,11 @@ endif
 ifeq ($(CFG_MICROTRUST_TEE_SUPPORT),1)
 MOD_SRC  += tz_teei.c
 endif
+
+ifeq ($(CFG_TRUSTKERNEL_TEE_SUPPORT),1)
+MOD_SRC += tz_tkcore.c
+endif
+
 ###################################################################
 # target
 ###################################################################
diff --git a/platform/mt6763/src/security/trustzone/tz_init.c b/platform/mt6763/src/security/trustzone/tz_init.c
index 9c07ddd..2f72726 100644
--- a/platform/mt6763/src/security/trustzone/tz_init.c
+++ b/platform/mt6763/src/security/trustzone/tz_init.c
@@ -55,6 +55,9 @@
 #if CFG_MICROTRUST_TEE_SUPPORT
 #include "tz_teei.h"
 #endif
+#if CFG_TRUSTKERNEL_TEE_SUPPORT
+#include "tz_tkcore.h"
+#endif
 #include "sec_devinfo.h"
 #include "tz_emi_mpu.h"
 #include "key_derive.h"
@@ -227,6 +230,13 @@ u32 tee_get_load_addr(u32 maddr)
             (u32)(limit_addr - align_addr));
         BUG_ON(1);
     }
+#elif CFG_TRUSTKERNEL_TEE_SUPPORT
+    limit_addr = 0xC0000000;
+    DBG_MSG("%s align_addr: 0x%llx, limit_addr: 0x%llx\n", MOD, align_addr, limit_addr);
+    tee_secmem_start = (u32)mblock_reserve_ext(&bootarg.mblock_info,
+        (u64)(tee_secmem_size + ATF_LOG_BUFFER_SIZE), (u64)TEE_MEM_ALIGNMENT,
+        limit_addr, 0, "tee-reserved");
+    DBG_MSG("%s TEE reserved_addr: 0x%x, reserved_size: 0x%x\n", MOD, tee_secmem_start, tee_secmem_size + ATF_LOG_BUFFER_SIZE);
 #else /* CFG_TRUSTONIC_TEE_SUPPORT */
     limit_addr = 0x80000000;
     DBG_MSG("%s align_addr: 0x%llx, limit_addr: 0x%llx\n", MOD, align_addr, limit_addr);
@@ -257,10 +267,17 @@ static void tee_sec_config(void)
     tz_sram_sec_init(NON_SECURE_SRAM_ADDR);
 
 #if CFG_TEE_SUPPORT
+#if CFG_TRUSTKERNEL_TEE_SUPPORT
+    tz_sec_mem_init(tee_entry_addr, tee_entry_addr + tee_secmem_size - TKCORE_SHM_SIZE_LIMIT - 1,
+        SECURE_OS_MPU_REGION_ID);
+	DBG_MSG("%s set secure memory protection : 0x%x, 0x%x (%d)\n", MOD, tee_entry_addr,
+        tee_entry_addr + tee_secmem_size - TKCORE_SHM_SIZE_LIMIT - 1, SECURE_OS_MPU_REGION_ID);
+#else
     tz_sec_mem_init(tee_entry_addr, tee_entry_addr + tee_secmem_size - 1, SECURE_OS_MPU_REGION_ID);
     DBG_MSG("%s set secure memory protection : 0x%x, 0x%x (%d)\n", MOD, tee_entry_addr,
         tee_entry_addr + tee_secmem_size - 1, SECURE_OS_MPU_REGION_ID);
 #endif
+#endif
 #if 1
 
     {
@@ -388,6 +405,13 @@ void trustzone_post_init(void)
     trusty_boot_param_prepare(TEE_BOOT_ARG_ADDR, tee_entry_addr, tee_secmem_size,
         CFG_DRAM_ADDR, platform_memory_size());
     teearg->tee_support = 1;
+#elif CFG_TRUSTKERNEL_TEE_SUPPORT
+	DBG_MSG("%s come to    tkcore ***  \n", MOD);
+    tkcore_boot_param_prepare(TEE_BOOT_ARG_ADDR, tee_entry_addr, tee_secmem_size,
+        CFG_DRAM_ADDR, platform_memory_size(),
+        g_boot_mode == META_BOOT && g_meta_com_type == META_UART_COM);
+    //prepare the parameter for secure driver here
+    teearg->tee_support = 1;
 #else //CFG_ATF_SUPPORT
     teearg->tee_support = 0;
 #endif
@@ -414,6 +438,18 @@ void trustzone_post_init(void)
 					sizeof(u32) * teearg->atf_hrid_size, rpmb_key);
 #endif
 
+#if CFG_TRUSTKERNEL_TEE_SUPPORT
+    tkcore_boot_param_prepare_rpmbkey(TEE_BOOT_ARG_ADDR, rpmb_key, RPMB_KEY_SIZE);
+    /* only useful for non-ATF platform */
+    tkcore_boot_param_prepare_nwbootargs(TEE_BOOT_ARG_ADDR, 0U, 0U);
+
+#if CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+    tkcore_boot_sdrpmb_init_finish(TEE_BOOT_ARG_ADDR);
+#endif
+
+    tkcore_dump_param(TEE_BOOT_ARG_ADDR);
+#endif
+
 #if CFG_RPMB_SET_KEY
 #if (CFG_BOOT_DEV == BOOTDEV_SDMMC) // For eMMC project with TEEs
     teearg->tee_rpmb_size = mmc_rpmb_get_size();
diff --git a/platform/mt6763/src/security/trustzone/tz_tkcore.c b/platform/mt6763/src/security/trustzone/tz_tkcore.c
new file mode 100644
index 0000000..b7bf0f0
--- /dev/null
+++ b/platform/mt6763/src/security/trustzone/tz_tkcore.c
@@ -0,0 +1,314 @@
+/* Include header files */
+#include "typedefs.h"
+#include "tz_mem.h"
+#include "uart.h"
+#include "dram_buffer.h"
+#include "platform.h"
+
+#include <mmc_core.h>
+
+#include "tz_tkcore.h"
+
+#define MOD "[TZ_TKCORE]"
+
+#define TEE_DEBUG
+#ifdef TEE_DEBUG
+#define DBG_MSG(str, ...) do {print(str, ##__VA_ARGS__);} while(0)
+#else
+#define DBG_MSG(str, ...) do {} while(0)
+#endif
+
+#if CFG_BOOT_ARGUMENT_BY_ATAG
+extern unsigned int g_uart;
+#elif CFG_BOOT_ARGUMENT && !CFG_BOOT_ARGUMENT_BY_ATAG
+#define bootarg g_dram_buf->bootarg
+#endif
+
+#if CFG_TRUSTKERNEL_TEE_SDRPMB_SUPPORT
+
+struct sdrpmb_info {
+    int failed; int part_id;
+    u32 sdrpmb_part_start;
+
+    u32 sdrpmb_partaddr;
+    u32 sdrpmb_partsize;
+    u32 sdrpmb_starting_sector;
+    u32 sdrpmb_nr_sectors;
+} sdrpmb_info = { 0, -1, 0U, 0U, 0U, 0U, 0U };
+
+static u64 mblock_reserve_dryrun(mblock_info_t *mblock_info, u64 reserved_size)
+{
+    int i, max_rank, target = -1;
+    u64 start, end, sz, max_addr = 0;
+    u64 reserved_addr = 0, align, limit;
+    mblock_t mblock;
+
+    align = 1ULL << 20;
+    /* address cannot go beyond 64bit */
+    limit = 0x100000000ULL;
+    /* always allocate from the larger rank */
+    max_rank = mblock_info->mblock_num - 1;
+
+    for (i = 0; i < mblock_info->mblock_num; i++) {
+        start = mblock_info->mblock[i].start;
+        sz = mblock_info->mblock[i].size;
+        end = limit < (start + sz)? limit: (start + sz);
+        reserved_addr = (end - reserved_size);
+        reserved_addr &= ~(align - 1);
+        if ((reserved_addr + reserved_size <= start + sz) &&
+                (reserved_addr >= start) &&
+                (mblock_info->mblock[i].rank <= max_rank) &&
+                (start + sz > max_addr) &&
+                (reserved_addr + reserved_size <= limit)) {
+            max_addr = start + sz;
+            target = i;
+        }
+    }
+
+    if (target < 0) {
+        printf("mblock_reserve error\n");
+        return 0;
+    }
+
+    start = mblock_info->mblock[target].start;
+    sz = mblock_info->mblock[target].size;
+    end = limit < (start + sz)? limit: (start + sz);
+    reserved_addr = (end - reserved_size);
+    reserved_addr &= ~(align - 1);
+
+    return reserved_addr;
+}
+
+/* note that memory is not really reserved */
+static int reserve_tmpmem(mblock_info_t *mblock_info, u32 *addr, u32 size)
+{
+    u64 _addr = mblock_reserve_dryrun(mblock_info, size);
+    if (_addr == 0ULL) {
+        return -1;
+    }
+
+    /* we only reserve memory lower than 32-bit address, thus
+       we can safely convert variable to u32 */
+    *addr = (u32) _addr;
+    return 0;
+}
+
+void sdrpmb_init_set_failed(void)
+{
+    sdrpmb_info.failed = 1;
+    sdrpmb_info.sdrpmb_partaddr = SDRPMB_FAILURE_MAGIC;
+    sdrpmb_info.sdrpmb_partsize = 0;
+}
+
+void tkcore_boot_param_prepare_sdrpmb_region(part_t *part)
+{
+    if (sdrpmb_info.failed || part == NULL) {
+        return;
+    }
+
+    sdrpmb_info.part_id = part->part_id;
+
+    u32 sect = part->start_sect + part->nr_sects;
+
+    if (sect < SDRPMB_REGION_SIZE / 512) {
+        printf("%s: unexpected MMC size: %u sectors\n", MOD, sect);
+        goto err;
+    }
+    sect -= SDRPMB_REGION_SIZE / 512;
+    /* sect % N must be smaller than sect */
+    sect -= sect % (SDRPMB_REGION_ALIGNMENT / 512);
+
+    if (sect < part->start_sect) {
+        printf("%s: unexpected sdrpmb partition start: %u size: %u\n", MOD, part->start_sect, part->nr_sects);
+        goto err;
+    }
+
+    sdrpmb_info.sdrpmb_part_start = part->start_sect;
+
+    sdrpmb_info.sdrpmb_starting_sector = sect;
+    sdrpmb_info.sdrpmb_nr_sectors = SDRPMB_REGION_SIZE / 512;
+
+    return;
+
+err:
+    sdrpmb_init_set_failed();
+}
+
+void tkcore_boot_param_prepare_sdrpmb_data(mblock_info_t *mblock, blkdev_t *bootdev)
+{
+    int ret = 0;
+    u64 start_byte;
+
+    if (sdrpmb_info.failed)
+        return;
+
+    /* check if sdrpmb region is not reserved */
+    if (sdrpmb_info.part_id < 0)
+        return;
+
+    if (mblock == NULL || bootdev == NULL) {
+        ret = -1;
+        goto out;
+    }
+
+    sdrpmb_info.sdrpmb_partsize = SDRPMB_DATA_SIZE << 1;
+    ret = reserve_tmpmem(mblock, &(sdrpmb_info.sdrpmb_partaddr), SDRPMB_DATA_SIZE << 1);
+    if (ret) {
+        printf("%s: reserve memory failed\n", MOD);
+        goto out;
+    }
+
+    /* TODO use sector size instead of the hard coded 512 */
+    start_byte = ((u64) sdrpmb_info.sdrpmb_starting_sector) * 512;
+
+    if ((ret = blkdev_read(bootdev, start_byte, SDRPMB_DATA_SIZE,
+        (u8 *) (sdrpmb_info.sdrpmb_partaddr), sdrpmb_info.part_id))) {
+        printf("%s: read SDRPMB.0 failed", MOD);
+        goto out;
+    }
+
+    if ((ret = blkdev_read(bootdev, start_byte + (SDRPMB_REGION_SIZE >> 1),
+        SDRPMB_DATA_SIZE, (u8 *) (sdrpmb_info.sdrpmb_partaddr + SDRPMB_DATA_SIZE),
+        sdrpmb_info.part_id))) {
+        printf("%s: read SDRPMB.1 failed", MOD);
+        goto out;
+    }
+
+out:
+    if (ret)
+        sdrpmb_init_set_failed();
+    return;
+}
+
+void tkcore_boot_sdrpmb_init_finish(u32 param_addr)
+{
+    int ret = 0;
+    tee_arg_t_ptr teearg = (tee_arg_t_ptr) param_addr;
+
+    if (teearg == NULL)
+        return;
+
+    if (sdrpmb_info.failed || sdrpmb_info.part_id < 0)
+        return;
+
+    teearg->sdrpmb_partaddr = sdrpmb_info.sdrpmb_partaddr;
+    teearg->sdrpmb_partsize = sdrpmb_info.sdrpmb_partsize;
+    teearg->sdrpmb_starting_sector = sdrpmb_info.sdrpmb_starting_sector - sdrpmb_info.sdrpmb_part_start;
+    teearg->sdrpmb_nr_sectors = sdrpmb_info.sdrpmb_nr_sectors;
+
+    return;
+}
+#endif
+
+void tkcore_boot_param_prepare(u32 param_addr, u32 tee_entry,
+    u64 sec_dram_size, u64 dram_base, u64 dram_size, int meta_uart)
+{
+    tee_arg_t_ptr teearg = (tee_arg_t_ptr) param_addr;
+
+    if (teearg == NULL) {
+        return;
+    }
+
+    /* Prepare TEE boot parameters */
+    teearg->magic = TKCORE_BOOTCFG_MAGIC;
+    teearg->length = sizeof(tee_arg_t);
+    teearg->version = (u64) TEE_ARGUMENT_VERSION;
+    teearg->dRamBase = dram_base;
+    teearg->dRamSize = dram_size;
+    teearg->secDRamBase = tee_entry;
+    teearg->secDRamSize = sec_dram_size;
+    teearg->secIRamBase = TEE_SECURE_ISRAM_ADDR;
+    teearg->secIRamSize = TEE_SECURE_ISRAM_SIZE;
+
+    /* GIC parameters */
+    teearg->total_number_spi = 352;
+    /* SSI Reserve */
+    teearg->ssiq_number = 32 + 296;
+
+    teearg->flags = 0;
+
+    if (meta_uart == 0) {
+#if CFG_BOOT_ARGUMENT_BY_ATAG
+        teearg->uart_base = g_uart;
+        DBG_MSG("%s teearg : CFG_BOOT_ARGUMENT_BY_ATAG 0x%x\n", __func__, g_uart);
+#elif CFG_BOOT_ARGUMENT && !CFG_BOOT_ARGUMENT_BY_ATAG
+        teearg->uart_base = bootarg.log_port;
+        DBG_MSG("%s teearg : CFG_BOOT_ARGUMENT 0x%x\n", __func__, bootarg.log_port);
+#else
+        teearg->uart_base = CFG_UART_LOG;
+        DBG_MSG("%s teearg : log port by prj cfg 0x%x\n", __func__, CFG_UART_LOG);
+#endif
+    } else {
+        teearg->uart_base = 0U;
+    }
+}
+
+void tkcore_dump_param(u32 param_addr)
+{
+    tee_arg_t_ptr teearg = (tee_arg_t_ptr) param_addr;
+
+    DBG_MSG("%s teearg.magic: 0x%x\n", MOD, teearg->magic);
+    DBG_MSG("%s teearg.length: 0x%x\n", MOD, teearg->length);
+    DBG_MSG("%s teearg.version: 0x%x\n", MOD, teearg->version);
+    DBG_MSG("%s teearg.dRamBase: 0x%x\n", MOD, teearg->dRamBase);
+    DBG_MSG("%s teearg.dRamSize: 0x%x\n", MOD, teearg->dRamSize);
+    DBG_MSG("%s teearg.secDRamBase: 0x%x\n", MOD, teearg->secDRamBase);
+    DBG_MSG("%s teearg.secDRamSize: 0x%x\n", MOD, teearg->secDRamSize);
+    DBG_MSG("%s teearg.secIRamBase: 0x%x\n", MOD, teearg->secIRamBase);
+    DBG_MSG("%s teearg.secIRamSize: 0x%x\n", MOD, teearg->secIRamSize);
+    DBG_MSG("%s teearg.gic_dist_base: 0x%x\n", MOD, teearg->gic_distributor_base);
+    DBG_MSG("%s teearg.gic_cpu_base: 0x%x\n", MOD, teearg->gic_cpuinterface_base);
+    DBG_MSG("%s teearg.gic_version: 0x%x\n", MOD, teearg->gic_version);
+    DBG_MSG("%s teearg.uart_base: 0x%x\n", MOD, teearg->uart_base);
+    DBG_MSG("%s teearg.total_number_spi: %d\n", MOD, teearg->total_number_spi);
+    DBG_MSG("%s teearg.ssiq_number: %d\n", MOD, teearg->ssiq_number);
+    DBG_MSG("%s teearg.flags: %x\n", MOD, teearg->flags);
+
+    if (teearg->version >= TEE_ARGUMENT_VERSION_V1_0) {
+        DBG_MSG("%s teearg.rpmb_key_programmed : %d\n",
+            MOD, teearg->rpmb_key_programmed);
+    }
+
+    if (teearg->version >= TEE_ARGUMENT_VERSION_V1_1) {
+        DBG_MSG("%s teearg.nw_bootargs: 0x%x\n", MOD, teearg->nw_bootargs);
+        DBG_MSG("%s teearg.nw_bootargs_size: 0x%x\n", MOD, teearg->nw_bootargs_size);
+    }
+
+    if (teearg->version >= TEE_ARGUMENT_VERSION_V1_2) {
+        DBG_MSG("%s teearg.sdrpmb_partaddr: 0x%x\n",
+            MOD, teearg->sdrpmb_partaddr);
+        DBG_MSG("%s teearg.sdrpmb_partsize: 0x%x\n",
+            MOD, teearg->sdrpmb_partsize);
+        DBG_MSG("%s teearg.sdrpmb_starting_sector: 0x%x\n",
+            MOD, teearg->sdrpmb_starting_sector);
+        DBG_MSG("%s teearg.sdrpmb_nr_sectors: 0x%x\n",
+            MOD, teearg->sdrpmb_nr_sectors);
+    }
+}
+
+void tkcore_boot_param_prepare_nwbootargs(u32 param_addr, u32 addr, u32 size)
+{
+    tee_arg_t_ptr teearg = (tee_arg_t_ptr) param_addr;
+
+    if (teearg == NULL)
+        return;
+
+    teearg->nw_bootargs = addr;
+    teearg->nw_bootargs_size = size;
+}
+
+void tkcore_boot_param_prepare_rpmbkey(u32 param_addr, u8 *rpmb_key, u32 rpmb_keylen)
+{
+    tee_arg_t_ptr teearg = (tee_arg_t_ptr) param_addr;
+
+    if (teearg == NULL) {
+        return ;
+    }
+
+    if (rpmb_keylen != RPMB_KEY_SIZE) {
+        return ;
+    }
+
+    memcpy(teearg->rpmb_key, rpmb_key, RPMB_KEY_SIZE);
+    teearg->rpmb_key_programmed = 1;
+}
